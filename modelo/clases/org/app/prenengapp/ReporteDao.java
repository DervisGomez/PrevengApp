package org.app.prenengapp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.app.prenengapp.Reporte;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REPORTE.
*/
public class ReporteDao extends AbstractDao<Reporte, Long> {

    public static final String TABLENAME = "REPORTE";

    /**
     * Properties of entity Reporte.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Imagen = new Property(1, String.class, "imagen", false, "IMAGEN");
        public final static Property Coordenadas = new Property(2, String.class, "coordenadas", false, "COORDENADAS");
        public final static Property Titulo = new Property(3, String.class, "titulo", false, "TITULO");
        public final static Property Descripcion = new Property(4, String.class, "descripcion", false, "DESCRIPCION");
    };


    public ReporteDao(DaoConfig config) {
        super(config);
    }
    
    public ReporteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REPORTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IMAGEN' TEXT," + // 1: imagen
                "'COORDENADAS' TEXT," + // 2: coordenadas
                "'TITULO' TEXT," + // 3: titulo
                "'DESCRIPCION' TEXT);"); // 4: descripcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REPORTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Reporte entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindString(2, imagen);
        }
 
        String coordenadas = entity.getCoordenadas();
        if (coordenadas != null) {
            stmt.bindString(3, coordenadas);
        }
 
        String titulo = entity.getTitulo();
        if (titulo != null) {
            stmt.bindString(4, titulo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(5, descripcion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Reporte readEntity(Cursor cursor, int offset) {
        Reporte entity = new Reporte( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagen
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coordenadas
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titulo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // descripcion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Reporte entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagen(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoordenadas(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitulo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescripcion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Reporte entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Reporte entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
